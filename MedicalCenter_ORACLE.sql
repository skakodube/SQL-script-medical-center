DROP TABLE REQPROCEDURE;
DROP TABLE REQMEDICATION;
DROP TABLE MEDICATION;
DROP TABLE PROCEDURE;
DROP TABLE VISIT;
DROP TABLE PATIENT;
DROP TABLE DOCTOR;
DROP TABLE SPEC;

CREATE TABLE PATIENT(
IDP NUMBER(4) NOT NULL PRIMARY KEY,
NAME VARCHAR2(10),
SURNAME VARCHAR2(15),
ADDRESS VARCHAR(15),
GENDER VARCHAR2(1),
DATEOFBIRTH DATE
);
INSERT INTO PATIENT VALUES (7369, 'JOHN', 'SMITH', 'DICKENSA', 'M',
TO_DATE('17-MAR-1989', 'DD-MON-YYYY') );
INSERT INTO PATIENT VALUES (6489, 'MARRY', 'SLADE', 'WAWELSKA', 'F',
TO_DATE('20-MAR-1984', 'DD-MON-YYYY') );
INSERT INTO PATIENT VALUES (4377, 'JACK', 'WHILLIAMS', 'NARUTOWICZA', 'M',
TO_DATE('17-MAY-1976', 'DD-MON-YYYY') );


CREATE TABLE SPEC(
IDS NUMBER NOT NULL PRIMARY KEY,
NAME VARCHAR2(15)
);
INSERT INTO SPEC VALUES (3898, 'PSYCHIATRIST');
INSERT INTO SPEC VALUES (4898, 'CARDIOLOGIST');
INSERT INTO SPEC VALUES (3598, 'SURGEON');

CREATE TABLE DOCTOR(
IDD NUMBER(4) NOT NULL PRIMARY KEY,
NAME VARCHAR2(10),
SURNAME VARCHAR2(15),
SAL NUMBER(5),
ADDRESS VARCHAR2(15),
PHONENUM NUMBER(9),
SPECIALIZATION NUMBER(4) REFERENCES SPECIALIZATION(IDS),
HIRE DATE,
STATUS VARCHAR2(15)
);
INSERT INTO DOCTOR VALUES (6382, 'KOEHN', 'BOBBY',15000, 'ZAWISZY', 743863384, 3898, TO_DATE('17-MAY-2000', 'DD-MON-YYYY'), 'WORK');
INSERT INTO DOCTOR VALUES (6682, 'ANNA', 'JONES',20000, 'KRAKOW', 143863384, 4898, TO_DATE('01-MAR-2015', 'DD-MON-YYYY'),'WORK');
INSERT INTO DOCTOR VALUES (6332, 'PIOTR', 'MILLER',24000, 'PIETSZAK', 343463384, 3598, TO_DATE('20-MAY-2007', 'DD-MON-YYYY'),'WORK');
 
CREATE TABLE VISIT(
IDV NUMBER(4) NOT NULL PRIMARY KEY,
DOCTOR NUMBER(4) REFERENCES DOCTOR(IDD),
PATIENT NUMBER(4) REFERENCES PATIENT(IDP),
DATEOFVISIT DATE
);
INSERT INTO VISIT VALUES (1351, 6382, 7369,
TO_DATE('17-MAR-2017', 'DD-MON-YYYY') );
INSERT INTO VISIT VALUES (9876, 6682, 6489,
TO_DATE('23-JUN-2017', 'DD-MON-YYYY') );
INSERT INTO VISIT VALUES (3234, 6332, 4377,
TO_DATE('02-JAN-2017', 'DD-MON-YYYY') );

CREATE TABLE MEDICATION
(IDM NUMBER(4) NOT NULL PRIMARY KEY,
NAME VARCHAR2(10),
COST NUMBER(4));
INSERT INTO MEDICATION VALUES (4647, 'ABILIFY', 300);
INSERT INTO MEDICATION VALUES (4767, 'KEFLEX', 100);
INSERT INTO MEDICATION VALUES (4642, 'CONCERTA', 150);

CREATE TABLE REQMEDICATION(
IDRM NUMBER(4) NOT NULL PRIMARY KEY,
VISIT NUMBER(4) REFERENCES VISIT(IDV),
MEDICATION NUMBER(4) REFERENCES MEDICATION(IDM),
QUANTITY NUMBER(2)
);
INSERT INTO REQMEDICATION VALUES (4447, 1351, 4647, 2);
INSERT INTO REQMEDICATION VALUES (5447, 9876, 4767, 5);
INSERT INTO REQMEDICATION VALUES (4467, 3234, 4642, 1);


CREATE TABLE PROCEDURE(
IDPR NUMBER(4) NOT NULL PRIMARY KEY,
NAME VARCHAR2(15),
COST NUMBER(4)
);
INSERT INTO PROCEDURE VALUES (5647, 'ABLATION', 1300);
INSERT INTO PROCEDURE VALUES (5434, 'ACUPUNCTURE', 800);
INSERT INTO PROCEDURE VALUES (6523, 'SCAN', 1500);

CREATE TABLE REQPROCEDURE(
IDRPR NUMBER(4)NOT NULL PRIMARY KEY,
VISIT NUMBER(4) REFERENCES VISIT(IDV),
PROCEDURE NUMBER(4) REFERENCES PROCEDURE(IDPR),
QUANTITY NUMBER(2)
);
INSERT INTO REQPROCEDURE VALUES (6123, 1351, 5647, 3);
INSERT INTO REQPROCEDURE VALUES (4131, 9876, 5434, 1);
INSERT INTO REQPROCEDURE VALUES (6112, 3234, 6523, 2);


DROP TABLE P_LOG;
CREATE TABLE P_LOG(
NAME VARCHAR2(10),
SURNAME VARCHAR2(15)
);

COMMIT;
set serveroutput on;

-------------------------------------------------------TABLES--------------------------------------------------------------

CREATE OR REPLACE PROCEDURE DOCTOR_TO_PATIENT(ID NUMBER, DOCTORS VARCHAR2)
AS
PATIENT_NAME VARCHAR2(15);
PATIENT_SURNAME VARCHAR2(15);
DOC_ID NUMBER(4);
TMP NUMBER(4);
TMP2 NUMBER(4);
no_such_doc exception;
BEGIN
    select COUNT(*) into TMP from DOCTOR WHERE IDD = ID;
if TMP=0 then RAISE no_such_doc;
    ELSE
    UPDATE DOCTOR SET STATUS = 'OFF' WHERE IDD = ID;
      SELECT NAME INTO PATIENT_NAME FROM DOCTOR WHERE IDD = ID;
      SELECT SURNAME INTO PATIENT_SURNAME FROM DOCTOR WHERE IDD = ID;
      TMP := RANDOM_IDP;
      INSERT INTO PATIENT (IDP, NAME, SURNAME) VALUES (TMP, PATIENT_NAME, PATIENT_SURNAME);
      SELECT IDD INTO DOC_ID FROM DOCTOR WHERE SPECIALIZATION = (SELECT IDS FROM SPEC WHERE NAME = DOCTORS) AND STATUS = 'WORK' AND ROWNUM = 1;
      IF sql%notfound THEN  RAISE no_such_doc; 
      END IF;
      INSERT INTO VISIT (IDV, PATIENT, DOCTOR) VALUES (RANDOM_IDV, TMP, DOC_ID);          
    END IF;
EXCEPTION
      WHEN no_such_doc THEN
      dbms_output.put_line('There is no doctor with such id!'); 
END;
/

EXECUTE DOCTOR_TO_PATIENT(6382, 'SURGEON');
SELECT * FROM VISIT;

CREATE OR REPLACE FUNCTION RANDOM_IDP
RETURN NUMBER 
IS
TMP NUMBER;
NEW_ID NUMBER;
BEGIN 
SELECT ROUND(DBMS_RANDOM.VALUE(1000,9999)) INTO NEW_ID FROM dual;
SELECT COUNT(IDP) INTO TMP FROM PATIENT WHERE IDP = NEW_ID;
IF TMP >0 THEN 
   RETURN RANDOM_ID;
   END IF;
    RETURN NEW_ID;
END;
    
CREATE OR REPLACE FUNCTION RANDOM_IDV
RETURN NUMBER 
IS
TMP NUMBER;
NEW_ID NUMBER;
BEGIN 
SELECT ROUND(DBMS_RANDOM.VALUE(1000,9999)) INTO NEW_ID FROM dual;
SELECT COUNT(IDV) INTO TMP FROM VISIT WHERE IDV = NEW_ID;
IF TMP >0 THEN 
   RETURN RANDOM_ID;
   END IF;
    RETURN NEW_ID;
END;
 
---------------------------------------BUDGET_RAISE---------------------------------------------
CREATE OR REPLACE PROCEDURE BUDGET_RAISE(Q NUMBER) AS
Cursor D is select IDD from DOCTOR WHERE SAL < (SELECT ((AVG(SAL))+10000) FROM DOCTOR);
X INTEGER;
nobody_at_this_possition exception;
DD NUMBER(4);
BEGIN
    SELECT COUNT(IDD) INTO X FROM DOCTOR;
    if X=0 then raise nobody_at_this_possition; 
    ELSE
    OPEN D;
    LOOP
        FETCH D INTO DD;
        EXIT WHEN D%notfound;
        UPDATE DOCTOR SET SAL = SAL*1.1 WHERE IDD = DD AND SAL = (SELECT MIN(SAL) FROM DOCTOR);
        IF D%ROWCOUNT = Q THEN dbms_output.put_line(Q || ' salaries has been raised');  
        END IF;
    END LOOP;
    END IF;
    COMMIT;
    CLOSE D;
exception 
    when nobody_at_this_possition then
    dbms_output.put_line('There is no one with such position!'); 
END;

EXECUTE BUDGET_RAISE(3);
SELECT * FROM DOCTOR;

--------------------------------------------INVOICE------------------------------------------------------------

    
CREATE OR REPLACE PROCEDURE INVOICE(ID NUMBER, NAME VARCHAR2) AS
MED NUMBER; QM NUMBER; PR NUMBER; QP NUMBER;
Cursor M_CURSOR is select IDM from MEDICATION, REQMEDICATION, VISIT WHERE IDM = MEDICATION AND VISIT = IDV AND PATIENT = ID;
Cursor P_CURSOR is select IDPR from PROCEDURE, REQPROCEDURE, VISIT WHERE IDPR = PROCEDURE AND VISIT = IDV AND PATIENT = ID;
TOTAL NUMBER; ID_V NUMBER(4); PP NUMBER; MM NUMBER(4); ICOUNT INT;
patient_no_visit exception;

BEGIN

    select IDV into ID_V from visit where PATIENT = ID;
        TOTAL := 0;
            OPEN M_CURSOR;
            LOOP
                FETCH M_CURSOR INTO MM;
                EXIT WHEN M_CURSOR%NOTFOUND;
                SELECT COST INTO MED FROM MEDICATION WHERE IDM = MM;
                SELECT QUANTITY INTO QM FROM REQMEDICATION WHERE MEDICATION = MM;
                TOTAL := TOTAL + (MED*QM);
            END LOOP;
            CLOSE M_CURSOR;
            
            OPEN P_CURSOR;
            LOOP
                FETCH P_CURSOR INTO PP;
                EXIT WHEN P_CURSOR%NOTFOUND;
                SELECT COST INTO PR FROM PROCEDURE WHERE IDPR = PP;
                SELECT QUANTITY INTO QP FROM REQPROCEDURE WHERE PROCEDURE = PP;
                TOTAL := TOTAL + (PR*QP);
            END LOOP;
            CLOSE P_CURSOR;

        dbms_output.put_line('A total invoice for patient '|| NAME ||' is ' || TOTAL); 
       
        delete from REQMEDICATION where VISIT = ID_V;
        delete from REQPROCEDURE where VISIT = ID_V;
        DELETE FROM VISIT WHERE IDV = ID_V;
END; 

CREATE OR REPLACE TRIGGER F
BEFORE DELETE
ON PATIENT for each row
DECLARE ICOUNT INT;
BEGIN
    select COUNT(IDV) into ICOUNT FROM VISIT WHERE PATIENT = :OLD.IDP;
            dbms_output.put_line('W'); 

    IF ICOUNT IS NULL THEN
            dbms_output.put_line('S'); 
            END IF;
INSERT into P_LOG VALUES(:OLD.NAME, :OLD.SURNAME);
INVOICE(:OLD.IDP, :OLD.NAME);
END;
/
SELECT * FROM PATIENT;
DELETE FROM PATIENT WHERE IDP = 1;
INSERT INTO PATIENT VALUES (6489, 'MARRY', 'SLADE', 'WAWELSKA', 'F',
TO_DATE('20-MAR-1984', 'DD-MON-YYYY') );

-------------------------------------------TRIGGERS--------------------------------------------------------------
set ServerOutPut On
DROP TRIGGER J;
CREATE OR REPLACE TRIGGER J
BEFORE INSERT
ON DOCTOR
FOR EACH ROW
BEGIN
SELECT NVL(MAX(IDD)+1, 10) INTO :NEW.IDD FROM DOCTOR;
END; 
/
CREATE OR REPLACE TRIGGER AJD
BEFORE INSERT
ON ADOCTOR
FOR EACH ROW
BEGIN
SELECT NVL(MAX(IDD)+1, 10) INTO :NEW.IDD FROM ADOCTOR;
END; 
/
DROP TRIGGER AJD;
INSERT INTO DOCTOR(NAME,SURNAME) VALUES ('JONH', 'BROWN');
SELECT * FROM DOCTOR;

DROP TRIGGER GF;
CREATE OR REPLACE TRIGGER GF
AFTER INSERT
ON DOCTOR FOR EACH ROW
BEGIN 
INSERT INTO PATIENT (IDP, NAME, SURNAME) VALUES (:NEW.IDD, :NEW.NAME, :NEW.SURNAME);
END;
/
INSERT INTO DOCTOR VALUES (1199, 'ANNA', 'JONES', 'KRAKOW', 143863384, 4898);
SELECT * FROM PATIENT;

CREATE OR REPLACE TRIGGER F
BEFORE DELETE
ON PATIENT for each row
BEGIN
INSERT into P_LOG VALUES(:OLD.NAME, :OLD.SURNAME);
END;
/
INSERT INTO PATIENT VALUES (7777, 'JACK', 'WHILLIAMS', 'NARUTOWICZA', 'M',
TO_DATE('17-MAY-1976', 'DD-MON-YYYY') );
DELETE FROM PATIENT WHERE IDP = 7777;
SELECT * FROM P_LOG;

CREATE OR REPLACE TRIGGER V
BEFORE UPDATE
ON SPECIALIZATION FOR EACH ROW
BEGIN
 IF :NEW.SAL = 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'cannot have null salary');
        
ELSIF :NEW.SAL < 0 THEN 
             RAISE_APPLICATION_ERROR(-20050, 'cannot have negative salary');
END IF;
END;
/
INSERT INTO SPECIALIZATION VALUES(1111, 'S', 67);
UPDATE SPECIALIZATION
SET SAL = -453
WHERE IDS = 1111;

CREATE TABLE ADDRESSES_LOG(NAME VARCHAR2(15), SURNAME VARCHAR2(15), ADDRESS VARCHAR2(15));

DROP TRIGGER P;
CREATE OR REPLACE TRIGGER P
AFTER UPDATE OF COST
ON MEDICATION FOR EACH ROW
DECLARE X NUMBER;
BEGIN
X := :NEW.COST - :OLD.COST;
IF(:NEW.COST > :OLD.COST) THEN
DBMS_output.put_line('The price of the medication was increased for ' || X);
ELSIF(:NEW.COST < :OLD.COST) THEN
DBMS_output.put_line('The price of the medication was decreased for ' || X);
END IF;
END;
/
INSERT INTO MEDICATION VALUES (4444, 'PSYCHIT', 5000);
UPDATE MEDICATION SET COST = 9000 WHERE IDM = 4444;
SELECT * FROM MEDICATION;

CREATE OR REPLACE TRIGGER H
AFTER DELETE
ON PATIENT 
DECLARE X NUMBER;
BEGIN
SELECT COUNT(IDP) INTO X FROM PATIENT;
DBMS_output.put_line('The count of patients from now equals ' || X);
END;
/

INSERT INTO PATIENT VALUES (7777, 'JACK', 'WHILLIAMS', 'NARUTOWICZA', 'M',
TO_DATE('17-MAY-1976', 'DD-MON-YYYY') );
DELETE FROM PATIENT WHERE IDP = 7777;
SELECT * FROM DOCTOR;
CREATE TABLE ADOCTOR AS SELECT IDD, NAME, SURNAME FROM DOCTOR;
DROP TABLE ADOCTOR;
SELECT * FROM ADOCTOR;
INSERT INTO ADOCTOR(NAME, SURNAME) SELECT NAME, SURNAME FROM PATIENT;
