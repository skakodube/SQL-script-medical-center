DROP TABLE REQPROCEDURE;
DROP TABLE REQMEDICATION;
DROP TABLE MEDICATION;
DROP TABLE PROCEDUR;
DROP TABLE VISIT;
DROP TABLE PATIENT;
DROP TABLE DOCTOR;
DROP TABLE SPEC;

CREATE TABLE PATIENT(
IDP NUMERIC(4) NOT NULL,
NAME CHAR(14),
SURNAME CHAR(14),
ADDRESS CHAR(15),
GENDER CHAR(1),
DATEOFBIRTH DATE,
CONSTRAINT IDP_PRIMARY_KEY PRIMARY KEY (IDP));

INSERT INTO PATIENT VALUES (7369, 'JOHN', 'SMITH', 'DICKENSA', 'M',
'17-MAR-1989');
INSERT INTO PATIENT VALUES (6489, 'MARRY', 'SLADE', 'WAWELSKA', 'F',
'20-MAR-1984');
INSERT INTO PATIENT VALUES (4377, 'JACK', 'WHILLIAMS', 'NARUTOWICZA', 'M',
'17-MAY-1976');

CREATE TABLE SPEC(
IDS NUMERIC(4) NOT NULL,
NAME CHAR(15)
CONSTRAINT IDS_PRIMARY_KEY PRIMARY KEY (IDS));

INSERT INTO SPEC VALUES (3898, 'PSYCHIATRIST');
INSERT INTO SPEC VALUES (4898, 'CARDIOLOGIST');
INSERT INTO SPEC VALUES (3598, 'SURGEON');

CREATE TABLE DOCTOR(
IDD NUMERIC(4) NOT NULL,
NAME CHAR(10),
SURNAME CHAR(15),
SAL NUMERIC(5),
ADDRESS CHAR(15),
PHONENUM NUMERIC(9),
SPECIALIZATION NUMERIC(4) NOT NULL,
HIRE DATE,
STATUS CHAR(15),
CONSTRAINT IDS_FOREIGN_KEY FOREIGN KEY(SPECIALIZATION) REFERENCES SPEC(IDS),
CONSTRAINT IDD_PRIMARY_KEY PRIMARY KEY(IDD));

INSERT INTO DOCTOR VALUES (6382, 'KOEHN', 'BOBBY',15000, 'ZAWISZY', 743863384, 3898, '17-MAY-2000', 'WORK');
INSERT INTO DOCTOR VALUES (6682, 'ANNA', 'JONES',20000, 'KRAKOW', 143863384, 4898, '01-MAR-2015','WORK');
INSERT INTO DOCTOR VALUES (6332, 'PIOTR', 'MILLER',24000, 'PIETSZAK', 343463384, 3598, '20-MAY-2007','WORK');

CREATE TABLE VISIT(
IDV NUMERIC(4) NOT NULL,
DOCTOR NUMERIC(4),
PATIENT NUMERIC(4),
DATEOFVISIT DATE,
CONSTRAINT D_FOREIGN_KEY FOREIGN KEY(DOCTOR) REFERENCES DOCTOR(IDD),
CONSTRAINT P_FOREIGN_KEY FOREIGN KEY(PATIENT) REFERENCES PATIENT(IDP),
CONSTRAINT IDV_PRIMARY_KEY PRIMARY KEY(IDV));

INSERT INTO VISIT VALUES (1351, 6382, 7369,'17-MAR-2017' );
INSERT INTO VISIT VALUES (9876, 6682, 6489,'23-JUN-2017' );
INSERT INTO VISIT VALUES (3234, 6332, 4377,'02-JAN-2017' );

CREATE TABLE MEDICATION
(IDM NUMERIC(4) NOT NULL,
NAME CHAR(10),
COST NUMERIC(4),
CONSTRAINT IDM_PRIMARY_KEY PRIMARY KEY(IDM));

INSERT INTO MEDICATION VALUES (4647, 'ABILIFY', 300);
INSERT INTO MEDICATION VALUES (4767, 'KEFLEX', 100);
INSERT INTO MEDICATION VALUES (4642, 'CONCERTA', 150);

CREATE TABLE REQMEDICATION(
IDRM NUMERIC(4) NOT NULL,
VISIT NUMERIC(4),
MEDICATION NUMERIC(4),
QUANTITY NUMERIC(2),
CONSTRAINT M_FOREIGN_KEY FOREIGN KEY(MEDICATION) REFERENCES MEDICATION(IDM),
CONSTRAINT VS_FOREIGN_KEY FOREIGN KEY(VISIT) REFERENCES VISIT(IDV),
CONSTRAINT IDRM_PRIMARY_KEY PRIMARY KEY(IDRM));

INSERT INTO REQMEDICATION VALUES (4447, 1351, 4647, 2);
INSERT INTO REQMEDICATION VALUES (5447, 9876, 4767, 5);
INSERT INTO REQMEDICATION VALUES (4467, 3234, 4642, 1);


CREATE TABLE PROCEDUR(
IDPR NUMERIC(4) NOT NULL,
NAME CHAR(15),
COST NUMERIC(4),
CONSTRAINT IDPR_PRIMARY_KEY PRIMARY KEY(IDPR));

INSERT INTO PROCEDUR VALUES (5647, 'ABLATION', 1200);
INSERT INTO PROCEDUR VALUES (5434, 'ACUPUNCTURE', 800);
INSERT INTO PROCEDUR VALUES (6523, 'SCAN', 1500);

CREATE TABLE REQPROCEDURE(
IDRPR NUMERIC(4)NOT NULL,
VISIT NUMERIC(4),
PROCEDUR NUMERIC(4),
QUANTITY NUMERIC(2),
CONSTRAINT PA_FOREIGN_KEY FOREIGN KEY(PROCEDUR) REFERENCES PROCEDUR(IDPR),
CONSTRAINT V_FOREIGN_KEY FOREIGN KEY(VISIT) REFERENCES VISIT(IDV),
CONSTRAINT IDRPR_PRIMARY_KEY PRIMARY KEY(IDRPR));

INSERT INTO REQPROCEDURE VALUES (6123, 1351, 5647, 3);
INSERT INTO REQPROCEDURE VALUES (4131, 9876, 5434, 1);
INSERT INTO REQPROCEDURE VALUES (6112, 3234, 6523, 2);

SET NOCOUNT ON
-----------------------------TRIGGER-1--------------------------
DROP TRIGGER TR_DOCTOR_UPDATE;
--determine how much doctors got a 'OFF' status
GO 
CREATE TRIGGER TR_DOCTOR_UPDATE 
ON DOCTOR
AFTER UPDATE
AS
--Make sure status was changed
IF NOT UPDATE(STATUS)
 RETURN
--Determine if status was changed to off
IF EXISTS (SELECT *
            FROM inserted a
			JOIN deleted b ON a.IDD = b.IDD
			WHERE b.STATUS<>'OFF' AND
			a.STATUS = 'OFF')
 BEGIN
  DECLARE @Count tinyint
  SET @Count = (SELECT COUNT(*)
                FROM inserted a
		JOIN deleted b ON a.IDD=b.IDD
		WHERE b.STATUS <> 'OFF' AND
		a.STATUS = 'OFF')
  PRINT CAST(@Count as varchar(3))+' Doctor(s) got a holiday'
 END;

INSERT INTO DOCTOR (IDD, SPECIALIZATION, STATUS) VALUES (1111,3898, 'WORK'),(2222, 3898, 'WORK');
UPDATE DOCTOR SET STATUS = 'OFF' WHERE IDD IN (1111,2222);
DELETE FROM DOCTOR WHERE IDD IN (1111, 2222);

-----------------------------TRIGGER-2--------------------------

CREATE TABLE P_LOG
(NAME CHAR(15),
SURNAME CHAR(15),
LEAVE_DAY DATE);

--if we delete patient, it adds to patient log
DROP TRIGGER TR_PATIENT_DELETE;
GO
CREATE TRIGGER TR_PATIENT_DELETE
ON PATIENT
FOR DELETE
AS
BEGIN
	DECLARE @DAY DATE, @OLDNAME CHAR(15), @OLDSURN CHAR(15), @OLDID INT
	SET @DAY = (SELECT CAST(GETDATE() As date ))
	
	SELECT @OLDID = IDP FROM DELETED
	SELECT @OLDNAME = NAME FROM DELETED
	SELECT @OLDSURN = SURNAME FROM DELETED
	
	INSERT INTO P_LOG VALUES(@OLDNAME, @OLDSURN, @DAY)
	PRINT 'Patient added to Log'

		DECLARE @FD VARCHAR(13);
	EXECUTE @FD = INVOICE @OLDID
	PRINT 'A price for a visit is ' + @FD

END

INSERT INTO PATIENT(IDP, NAME, SURNAME) VALUES (9999, 'HANK', 'WILLSON');
DELETE FROM PATIENT WHERE IDP = 9999;
SELECT * FROM P_LOG;
DELETE FROM P_LOG WHERE NAME = 'HANK';

-----------------------------TRIGGER-3--------------------------
--delete if we inserted medication with too high price
DROP TRIGGER TR_MEDICATION_INSERT;
GO
CREATE TRIGGER TR_MEDICATION_INSERT
ON MEDICATION
FOR INSERT 
AS
IF EXISTS 
		(SELECT * FROM INSERTED WHERE COST > 1000)
BEGIN
	DECLARE TR_CURSOR CURSOR FOR SELECT IDM FROM inserted WHERE COST > 1000
	DECLARE @MED INT
	OPEN TR_CURSOR
	FETCH NEXT FROM TR_CURSOR INTO @MED
	WHILE @@FETCH_STATUS = 0
		BEGIN
		DELETE FROM MEDICATION WHERE IDM = @MED
		PRINT 'A treatment was deleted due to the high price.'
		FETCH NEXT FROM TR_CURSOR INTO @MED
		END
	CLOSE TR_CURSOR
	END
SELECT * FROM MEDICATION;

INSERT INTO MEDICATION (IDM, COST) VALUES (8888, 2000),(8439, 2000);
------------------------------------TRIGGER-4------------------------------------------
DROP TRIGGER TR22;
GO
CREATE TRIGGER TR22
ON PROCEDUR 
FOR INSERT, UPDATE
AS
	BEGIN
		DECLARE @COST NUMERIC(5)
		SELECT @COST = COST FROM INSERTED
		IF @COST < 0
			BEGIN
				ROLLBACK
				RAISERROR('Cannot have negative values', 1, 16)
			END
	END

INSERT INTO PROCEDUR (IDPR, NAME, COST) VALUES (1814, 'DUPHALAK', -10);

-----------------------------PROCEDURE-1----------------------------------------
--OUTPUT

--COUNT OF VISITS UNSING A PARTICULAR PROCEDURE
DROP PROCEDURE VISITS_BY_PROCEDUR
GO
CREATE PROCEDURE VISITS_BY_PROCEDUR
	@PROCEDURE VARCHAR(15), 
	@COUNT INT OUTPUT
AS
BEGIN
SELECT 
	IDV, NAME
FROM 
	VISIT V
	JOIN REQPROCEDURE ON V.IDV = REQPROCEDURE.VISIT
	JOIN PROCEDUR ON REQPROCEDURE.PROCEDUR = PROCEDUR.IDPR
WHERE NAME = @PROCEDURE;
	SELECT @COUNT = @@ROWCOUNT;
END;

DECLARE @COUNT INT;
EXEC VISITS_BY_PROCEDUR 'ABLATION', @COUNT OUTPUT;
SELECT @COUNT AS 'Number of visits found';


--Generate new id for a Patient.
drop PROCEDURE PGENERATOR
GO
CREATE PROCEDURE PGENERATOR
	@ID INT OUTPUT
AS
BEGIN
	SET @ID = floor(RAND()*(10000-999+1))+999;
	IF EXISTS (SELECT * FROM PROCEDUR WHERE IDPR = @ID)
		BEGIN
			EXEC @ID = PGENERATOR @ID;
		END
END
GO

DECLARE @ID INT
EXECUTE PGENERATOR @ID OUTPUT;
SELECT @ID
---------------------------------------------------PROCEDURE-2----------------------------------------------------------------------
--RESULT SET
--Add a new procedure and check it for errors.
DROP PROCEDURE CHECK_PROCEDUR;
GO
CREATE PROCEDURE CHECK_PROCEDUR @NAME CHAR, @COST INT AS
BEGIN
DECLARE @ID INT
EXECUTE @ID = PGENERATOR @ID OUTPUT;
BEGIN TRY
	INSERT INTO PROCEDUR (IDPR, NAME, COST) VALUES (@ID, @NAME, @COST)
	END TRY
BEGIN CATCH
	SELECT 'Transaction is Rollback'
	SELECT     ERROR_NUMBER() 		AS ErrorNumber  
    	      ,ERROR_SEVERITY() 	AS ErrorSeverity  
	          ,ERROR_STATE() 		AS ErrorState  
	          ,ERROR_PROCEDURE()    AS ErrorProcedure  
              ,ERROR_LINE() 		AS ErrorLine  
              ,ERROR_MESSAGE() 		AS ErrorMessage; 
END CATCH
COMMIT TRANSACTION;
END;

SELECT * FROM DOCTOR;

EXEC CHECK_PROCEDUR 'JOHN', 10000

--Look for Doctors which was employed during a given year.
DROP PROCEDURE EMP_YEAR
GO
CREATE PROCEDURE EMP_YEAR @YEAR INT AS
BEGIN
SELECT NAME, SURNAME, HIRE FROM DOCTOR WHERE YEAR(HIRE) = @YEAR
END

EXEC EMP_YEAR 2000
WITH RESULT SETS(
(name varchar(10),
surname varchar(10),
hiredate date))


--Show short info of a visit.
DROP PROCEDURE PATIENT_DATE
GO
CREATE PROCEDURE PATIENT_DATA 
@P_NAME VARCHAR(15) = 'JOHN'
AS
BEGIN
SELECT P.NAME AS Name,
	 P.SURNAME AS Surname,
	 D.SURNAME AS Doctor,
	 DATEOFVISIT AS Date
FROM PATIENT P 
	JOIN VISIT ON VISIT.PATIENT = P.IDP
	JOIN DOCTOR D ON VISIT.DOCTOR = D.IDD
WHERE P.NAME = @P_NAME;
END;

EXECUTE PATIENT_DATA
EXECUTE PATIENT_DATA 'MARRY'


--Insert a new medication.
--Generate new id.
DROP PROCEDURE MEDICATION_ADD;
GO
CREATE PROCEDURE MEDICATION_ADD
@M_NAME VARCHAR(20), @M_COST NUMERIC(7)
AS
INSERT INTO MEDICATION(IDM, NAME, COST)
SELECT ISNULL(MAX(IDM)+1,1),
@M_NAME, @M_COST FROM MEDICATION;


EXECUTE MEDICATION_ADD 'TEGRETOL', 450

DELETE FROM MEDICATION WHERE NAME = 'TEGRETOL';
select * from MEDICATION;



-----------------------------------------------PROCEDURE-3----------------------------------------------------------------------------
--Calculates an Invoice for a visit.
--RETURN CLAUSE
DROP PROCEDURE INVOICE;
GO
CREATE PROCEDURE INVOICE @ID NUMERIC(4)
AS
BEGIN
DECLARE M_CURSOR CURSOR LOCAL SCROLL FOR SELECT IDM FROM MEDICATION, REQMEDICATION, VISIT WHERE IDM = MEDICATION AND VISIT = IDV AND PATIENT = @ID;
DECLARE P_CURSOR CURSOR LOCAL SCROLL FOR select IDPR from PROCEDUR, REQPROCEDURE, VISIT WHERE IDPR = PROCEDUR AND VISIT = IDV AND PATIENT = @ID;
DECLARE @MED AS NUMERIC(7), @QM AS NUMERIC(2), @PR AS NUMERIC(7), @QP AS NUMERIC(2), @TOTAL AS NUMERIC(7), @ID_V AS NUMERIC(4), @MM AS NUMERIC(4), @PP AS NUMERIC(4)
DECLARE @ROWCOUNT INT;
SET @ROWCOUNT = (SELECT COUNT(IDV) FROM VISIT WHERE PATIENT = @ID)
IF @ROWCOUNT = 0
	BEGIN
	RAISERROR('Patient does not exist', 16, 1)
	END
ELSE
	SET @TOTAL = 0;
	open M_CURSOR
	FETCH NEXT FROM M_CURSOR INTO @MM;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @MED = (SELECT COST FROM MEDICATION WHERE IDM = @MM)
		SET @QM = (SELECT QUANTITY FROM REQMEDICATION WHERE MEDICATION = @MM)
		SET @TOTAL = (@TOTAL + (@MED * @QM));
	FETCH NEXT FROM M_CURSOR INTO @MM
	END
	CLOSE M_CURSOR

	open P_CURSOR
	FETCH NEXT FROM P_CURSOR INTO @PP;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @PR = (SELECT COST FROM PROCEDUR WHERE IDPR = @PP)
		SET @QP = (SELECT QUANTITY FROM REQPROCEDURE WHERE PROCEDUR = @PP)
		SET @TOTAL = @TOTAL + (@PR*@QP);
	FETCH NEXT FROM P_CURSOR INTO @PP
	END
	CLOSE P_CURSOR
RETURN @TOTAL;
END
	
	DECLARE @FD VARCHAR(13);
	EXECUTE @FD = INVOICE 4377
	SELECT @FD
	
-------------------------------------------------------------------------------------------------------